@startuml CustomerRegistrationFailureScenarioSlowMessageQueue
!pragma teoz true

hide footbox
actor Customer

title "Customer Registration Failure Scenario: Slow MessageQueue"

box "Internal Services" #LightBlue
collections GatewayService
collections LoadBalancer
collections DiscoveryService
collections AuthService
queue MessageQueueBroker
end box

box "Microservices"
collections MS1
end box

database MS1DB
database UserDB

Customer -> GatewayService ++ : customer/registerCustomer(ms1Inf, userInf)
GatewayService -> LoadBalancer ++ : ms1/\napi(ms1Inf, authInf)
LoadBalancer -> DiscoveryService ++ : getServiceInfo(MS1)
return serviceAddress 
LoadBalancer -> MS1 ++ : serviceAddress/ms1/api(ms1Inf, authInf)
MS1 -> MS1DB ++: insert(ms1Inf)
return return OK 
MS1 -> MessageQueueBroker : pushMessage(userInf)
...Expiry Time...
MS1 -> MS1DB ++: rollback(ms1Inf)
return return OK 
return return FAIL 
return return FAIL 
return return FAIL 
...After a While...
MessageQueueBroker -> AuthService ++ : dispatch(newms1Inf)
AuthService -> UserDB ++ : insert(UserInf)
return return OK 
AuthService -> MessageQueueBroker -- : updateMessage(OK)
MessageQueueBroker -> MS1 -- : dispatch(OK)
MS1 -> MessageQueueBroker ++ : pushMessage(FAIL)
MessageQueueBroker -> AuthService ++ : dispatch(ROLLBACK)
AuthService -> UserDB ++ : rollback(UserInf)
return return OK 
AuthService -> MessageQueueBroker -- : updateMessage(ROLLBACK_SUCCESS) 
MessageQueueBroker -> MS1 -- : dispatch(ROLLBACK_SUCCESS)



@enduml